// <auto-generated />
using System;
using Cheers.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cheers.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cheers.Core.Entities.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MaleId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchMakerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WomenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaleId");

                    b.HasIndex("MatchMakerId");

                    b.HasIndex("WomenId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Cheers.Core.Entities.FamilyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FamilyAbout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyRabbi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherAffiliation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherYeshiva")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HealthStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("MaleId")
                        .HasColumnType("int");

                    b.Property<string>("MotherGraduateSeminar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherOccupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPreviousName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ParentsStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("WomenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaleId")
                        .IsUnique()
                        .HasFilter("[MaleId] IS NOT NULL");

                    b.HasIndex("WomenId")
                        .IsUnique()
                        .HasFilter("[WomenId] IS NOT NULL");

                    b.ToTable("FamilyDetails");
                });

            modelBuilder.Entity("Cheers.Core.Entities.Male", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AgeFrom")
                        .HasColumnType("int");

                    b.Property<int>("AgeTo")
                        .HasColumnType("int");

                    b.Property<bool>("AnOutsider")
                        .HasColumnType("bit");

                    b.Property<string>("Appearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackGround")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Beard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BigYeshiva")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BurnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Club")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DriversLicense")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpectationsFromPartner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacePaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralAppearance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadCovering")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HealthCondition")
                        .HasColumnType("bit");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Hot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantTraitsIAmLookingFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantTraitsInMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kibbutz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Openness")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PairingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredProfessionalPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredSeminarStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmallYeshiva")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Smoker")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatusVacant")
                        .HasColumnType("bit");

                    b.Property<string>("Suit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Males");
                });

            modelBuilder.Entity("Cheers.Core.Entities.MatchMaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Community")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExperienceInShidduchim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasChildrenInShidduchim")
                        .HasColumnType("bit");

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsInternalMatchmaker")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeminarGraduate")
                        .HasColumnType("bit");

                    b.Property<string>("LandlinePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LifeSkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatchmakerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousWorkplaces")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("YearsInShidduchim")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MatchMakers");
                });

            modelBuilder.Entity("Cheers.Core.Entities.MatchMaking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaleId")
                        .HasColumnType("int");

                    b.Property<int>("MatchMakerId")
                        .HasColumnType("int");

                    b.Property<int?>("NumMeetings")
                        .HasColumnType("int");

                    b.Property<int>("WomenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaleId");

                    b.HasIndex("MatchMakerId");

                    b.HasIndex("WomenId");

                    b.ToTable("MatchMakings");
                });

            modelBuilder.Entity("Cheers.Core.Entities.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MatchMakingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumMeeting")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchMakingId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Cheers.Core.Entities.Woman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalEducationalInstitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("AgeFrom")
                        .HasColumnType("int");

                    b.Property<int?>("AgeTo")
                        .HasColumnType("int");

                    b.Property<bool?>("AnOutsider")
                        .HasColumnType("bit");

                    b.Property<string>("Appearance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackGround")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Beard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BurnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Club")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacePaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralAppearance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadCovering")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HealthCondition")
                        .HasColumnType("bit");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("HighSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantTraitsIMLookingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportantTraitsInMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterestedInBoy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Openness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PairingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredSittingStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seminar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Smoker")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StatusVacant")
                        .HasColumnType("bit");

                    b.Property<string>("StudyPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tz")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Womens");
                });

            modelBuilder.Entity("Cheers.Core.Entities.Contacts", b =>
                {
                    b.HasOne("Cheers.Core.Entities.Male", "Male")
                        .WithMany("Acquaintances")
                        .HasForeignKey("MaleId");

                    b.HasOne("Cheers.Core.Entities.MatchMaker", "MatchMaker")
                        .WithMany("Recommend")
                        .HasForeignKey("MatchMakerId");

                    b.HasOne("Cheers.Core.Entities.Woman", "Women")
                        .WithMany("Contacts")
                        .HasForeignKey("WomenId");

                    b.Navigation("Male");

                    b.Navigation("MatchMaker");

                    b.Navigation("Women");
                });

            modelBuilder.Entity("Cheers.Core.Entities.FamilyDetail", b =>
                {
                    b.HasOne("Cheers.Core.Entities.Male", "Male")
                        .WithOne("FamilyDetails")
                        .HasForeignKey("Cheers.Core.Entities.FamilyDetail", "MaleId");

                    b.HasOne("Cheers.Core.Entities.Woman", "Women")
                        .WithOne("FamilyDetails")
                        .HasForeignKey("Cheers.Core.Entities.FamilyDetail", "WomenId");

                    b.Navigation("Male");

                    b.Navigation("Women");
                });

            modelBuilder.Entity("Cheers.Core.Entities.MatchMaking", b =>
                {
                    b.HasOne("Cheers.Core.Entities.Male", "Male")
                        .WithMany("Matchings")
                        .HasForeignKey("MaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cheers.Core.Entities.MatchMaker", "MatchMaker")
                        .WithMany("Matches")
                        .HasForeignKey("MatchMakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cheers.Core.Entities.Woman", "Women")
                        .WithMany("Matchings")
                        .HasForeignKey("WomenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Male");

                    b.Navigation("MatchMaker");

                    b.Navigation("Women");
                });

            modelBuilder.Entity("Cheers.Core.Entities.Meeting", b =>
                {
                    b.HasOne("Cheers.Core.Entities.MatchMaking", "MatchMaking")
                        .WithMany("Meetings")
                        .HasForeignKey("MatchMakingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchMaking");
                });

            modelBuilder.Entity("Cheers.Core.Entities.Male", b =>
                {
                    b.Navigation("Acquaintances");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Matchings");
                });

            modelBuilder.Entity("Cheers.Core.Entities.MatchMaker", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Recommend");
                });

            modelBuilder.Entity("Cheers.Core.Entities.MatchMaking", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("Cheers.Core.Entities.Woman", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("FamilyDetails");

                    b.Navigation("Matchings");
                });
#pragma warning restore 612, 618
        }
    }
}
